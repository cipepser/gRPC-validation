// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
	Mail                 string   `protobuf:"bytes,4,opt,name=mail" json:"mail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_8bec928ad310964e, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (dst *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(dst, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

type Name struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_8bec928ad310964e, []int{1}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (dst *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(dst, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_8bec928ad310964e, []int{2}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Users struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_8bec928ad310964e, []int{3}
}
func (m *Users) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Users.Unmarshal(m, b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Users.Marshal(b, m, deterministic)
}
func (dst *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(dst, src)
}
func (m *Users) XXX_Size() int {
	return xxx_messageInfo_Users.Size(m)
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*Name)(nil), "user.Name")
	proto.RegisterType((*Empty)(nil), "user.Empty")
	proto.RegisterType((*Users)(nil), "user.Users")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *Name, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUser(context.Context, *Name) (*User, error)
	GetUsers(context.Context, *Empty) (*Users, error)
	AddUser(context.Context, *User) (*Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_8bec928ad310964e) }

var fileDescriptor_user_8bec928ad310964e = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xed, 0x7c, 0x4d, 0xbe, 0x7e, 0xdf, 0x0d, 0x88, 0xcc, 0x2a, 0x44, 0xa4, 0x71, 0x0c, 0x92,
	0x5a, 0xf2, 0x43, 0x2b, 0x56, 0x77, 0x5a, 0x90, 0xee, 0x5c, 0x44, 0x5c, 0x19, 0x0b, 0x69, 0x33,
	0xb4, 0xc1, 0xa6, 0x53, 0x32, 0x69, 0x83, 0x58, 0xc1, 0xb7, 0xf0, 0x7d, 0x7c, 0x91, 0x42, 0x5f,
	0x44, 0x99, 0x49, 0xd5, 0x0a, 0xce, 0x62, 0x38, 0x87, 0x73, 0xce, 0xbd, 0x73, 0xef, 0x00, 0xcc,
	0x39, 0xcd, 0xdc, 0x59, 0xc6, 0x72, 0x86, 0x15, 0x81, 0x8d, 0xd3, 0x51, 0x92, 0x8f, 0xe7, 0x03,
	0x77, 0xc8, 0x52, 0x2f, 0x2d, 0x92, 0xfc, 0x81, 0x15, 0xde, 0x88, 0x39, 0xd2, 0xe2, 0x2c, 0xa2,
	0x49, 0x12, 0x47, 0x39, 0xcb, 0xb8, 0xf7, 0x05, 0xcb, 0x34, 0x79, 0x43, 0xa0, 0xdc, 0x72, 0x9a,
	0x61, 0x0c, 0xca, 0x34, 0x4a, 0xa9, 0x8e, 0x4c, 0x64, 0xff, 0x0f, 0x24, 0xc6, 0x16, 0x54, 0xa3,
	0x11, 0xd5, 0xff, 0x98, 0xc8, 0x56, 0xbb, 0x78, 0xbd, 0xaa, 0xef, 0xec, 0xbe, 0x7f, 0x1e, 0xa4,
	0xbf, 0xa2, 0x40, 0xc8, 0xb8, 0x03, 0xea, 0x6c, 0xcc, 0xa6, 0x54, 0xaf, 0x8a, 0x68, 0xf7, 0x60,
	0xbd, 0xaa, 0xef, 0xc3, 0x5e, 0xdf, 0xf6, 0x3b, 0xfe, 0xd2, 0x3f, 0xf3, 0x97, 0xfe, 0xb9, 0xdf,
	0x70, 0xc2, 0xf8, 0xe9, 0xe4, 0xb9, 0xbc, 0xad, 0xa0, 0xf4, 0xe3, 0x1e, 0x28, 0x69, 0x94, 0x4c,
	0x74, 0x45, 0xe6, 0xda, 0xeb, 0x55, 0xdd, 0x03, 0xa7, 0x1f, 0x16, 0x4d, 0xfb, 0xce, 0x69, 0xba,
	0xf7, 0x61, 0xd1, 0x6c, 0x1c, 0x5f, 0x94, 0x74, 0xc3, 0x42, 0xf7, 0x07, 0xb5, 0x02, 0x59, 0x80,
	0x18, 0xa0, 0x5c, 0x8b, 0xf7, 0xfe, 0x32, 0x03, 0xa9, 0x81, 0x7a, 0x95, 0xce, 0xf2, 0x47, 0xd2,
	0x00, 0x55, 0x0c, 0xca, 0xb1, 0x09, 0xaa, 0x58, 0x19, 0xd7, 0x91, 0x59, 0xb5, 0xb5, 0x16, 0xb8,
	0x72, 0x99, 0x42, 0x0b, 0x4a, 0xa1, 0xf5, 0x82, 0x40, 0x13, 0xfc, 0x86, 0x66, 0x8b, 0x64, 0x48,
	0xf1, 0x21, 0xd4, 0x7a, 0x34, 0x97, 0x6b, 0xda, 0xb8, 0x45, 0x3b, 0x63, 0x2b, 0x49, 0x2a, 0xf8,
	0x08, 0xfe, 0x6d, 0x4c, 0x1c, 0x6b, 0xa5, 0x22, 0x1b, 0x1b, 0xda, 0xb7, 0x8d, 0x93, 0x0a, 0xb6,
	0xa0, 0x76, 0x19, 0xc7, 0xdb, 0xc5, 0x04, 0x36, 0xb6, 0x23, 0xa4, 0x32, 0xf8, 0x2b, 0xbf, 0xa7,
	0xfd, 0x11, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xfc, 0x20, 0xd5, 0xea, 0x01, 0x00, 0x00,
}
